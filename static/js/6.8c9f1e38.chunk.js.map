{"version":3,"sources":["components/charSearchForm/charSearchForm.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","resources/img/vision.png","components/pages/MainPage.js","components/errorMessage/error.gif","components/errorMessage/errorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js","components/errorBoundary/ErrorBoundary.js"],"names":["CharSearchForm","useState","char","setChar","useMarvelService","getCharacterByName","clearError","onCharLoaded","errorMessage","process","className","results","length","name","to","id","initialValues","charName","validationSchema","Yup","required","onSubmit","then","htmlFor","type","placeholder","disabled","component","View","data","description","thumbnail","homepage","wiki","imgStyle","src","alt","style","href","RandomChar","getCharacter","setProcess","useEffect","updateChar","timerId","setInterval","clearInterval","Math","floor","random","setContent","onClick","mjolnir","CharList","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","Component","Spinner","Error","arr","items","map","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","renderItems","comics","resourceURI","slice","CharInfo","charId","MainPage","selectedChar","Helmet","content","ErrorBoundary","decoration","ErrorMessage","display","width","height","objectFit","margin","img","request","useCallback","url","a","method","body","headers","fetch","responce","ok","status","json","useHttp","_apiBase","_apiKey","res","_tranformCharacter","getAllComics","_tranformComics","getComic","path","extension","urls","title","pageCount","language","textObjects","price","prices","Skeleton","state","error","err","errInfo","console","log","this","setState","children"],"mappings":"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","file":"static/js/6.8c9f1e38.chunk.js","sourcesContent":["import {useState} from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/errorMessage';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const {getCharacterByName, clearError} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded);\r\n    }\r\n\r\n    const errorMessage = process === 'error' ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n                    <div className=\"char__search-wrapper\">\r\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div> : \r\n                    <div className=\"char__search-error\">\r\n                        The character was not found. Check the name and try again\r\n                    </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues = {{\r\n                    charName: ''\r\n                }}\r\n                validationSchema = {Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit = { ({charName}) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field \r\n                            id=\"charName\" \r\n                            name='charName' \r\n                            type='text' \r\n                            placeholder=\"Enter name\"/>\r\n                        <button \r\n                            type='submit' \r\n                            className=\"button button__main\"\r\n                            disabled={process === 'loading'}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\nimport setContent from '../../utils/setContent';\n\nconst RandomChar = () => {\n    const [char, setChar] = useState({})\n\n    const { getCharacter, clearError, process, setProcess} = useMarvelService();\n\n\n    useEffect(() => {\n        updateChar()\n        const timerId = setInterval(updateChar, 15000)\n\n        return () => {\n            clearInterval(timerId);\n        }\n    }, []) // eslint-disable-line react-hooks/exhaustive-deps\n\n    const onCharLoaded = (char) => {\n        setChar(char)\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacter(id)\n        .then(onCharLoaded)\n        .then(() => setProcess('confirmed'))\n    }   \n\n    return (\n        <div className=\"randomchar\">\n            {setContent(process, View, char)}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button className=\"button button__main\" onClick={updateChar}>\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki} = data;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import { useState, useEffect, useRef, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport Spinner from '../spinner/Spinner';\nimport {CSSTransition, TransitionGroup} from 'react-transition-group';\nimport ErrorMessage from '../errorMessage/errorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport './charList.scss';\n\nconst setContent = (process, Component, newItemLoading) => {\n    switch (process) {\n        case 'waiting':\n            return <Spinner/>;\n        case 'loading':\n            return newItemLoading ? <Component/> : <Spinner/>;\n        case 'confirmed':\n            return <Component/>;\n        case 'error':\n            return <ErrorMessage/>;\n        default:\n            throw new Error('Unexpected process state');\n    }\n}\n\nconst CharList = (props) => {\n\n    const [ charList, setCharList ] = useState([]);\n    const [ newItemLoading, setNewItemLoading ] = useState(false);\n    const [ offset, setOffset ] = useState(210);\n    const [ charEnded, setCharEnded ] = useState(false);\n    \n    const { getAllCharacters, process, setProcess } = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, []) // eslint-disable-line react-hooks/exhaustive-deps\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true)\n        getAllCharacters(offset)\n        .then(onCharListLoaded)\n        .then(() => setProcess('confirmed'))\n    }\n\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n        setCharList(charList => [...charList, ...newCharList]);\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended);\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    function renderItems(arr) {\n        const items =  arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg' || item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/f/60/4c002e0305708.gif') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            \n            return (\n               <CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\n                    <li \n                    className=\"char__item\"\n                    tabIndex={0}\n                    ref={el => itemRefs.current[i] = el}\n                    onClick={() => {\n                        props.onCharSelected(item.id);\n                        focusOnItem(i);\n                    }}\n                    onKeyPress={(e) => {\n                        if (e.key === ' ' || e.key === \"Enter\") {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }\n                    }}>\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                        <div className=\"char__name\">{item.name}</div>\n                    </li>\n               </CSSTransition>\n            )\n        });\n        \n        return (\n                <ul className=\"char__grid\">\n                    <TransitionGroup component={null}>\n                        {items}\n                    </TransitionGroup>\n                </ul>\n        )\n    }\n\n    const elements = useMemo(() => {\n        return setContent(process, () => renderItems(charList), newItemLoading);\n        // eslint-disable-next-line\n    }, [process])\n\n        return (\n            <div className=\"char__list\">\n                {elements}\n                <button \n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{'display': charEnded ? 'none' : 'block'}}\n                onClick={() => onRequest(offset)}>\n                    <div className=\"inner\">load more</div>\n                </button>\n            </div>\n        )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport setContent from '../../utils/setContent';\nimport './charInfo.scss';\nimport useMarvelService from '../../services/MarvelService';\n\nconst CharInfo = (props) => {\n    const [char, setChar] = useState(null)\n\n    const { getCharacter, clearError, process, setProcess } = useMarvelService();\n\n    useEffect(() => {\n        updateChar()\n    }, [props.charId]) // eslint-disable-line react-hooks/exhaustive-deps\n\n    const updateChar = () => {\n        const {charId} = props;\n        if (!charId) {\n            return;\n        }\n        clearError();\n        getCharacter(charId)\n        .then(onCharLoaded)\n        .then(() => setProcess('confirmed'))\n    }\n\n    \n    const onCharLoaded = (char) => {\n        setChar(char)\n    }\n\n    \n    \n    return (\n        <div className=\"char__info\">\n           {setContent(process, View, char)}\n        </div>\n    )\n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = data;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg' || thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/f/60/4c002e0305708.gif') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n    return (\n        <>\n        <div className=\"char__basics\">\n            <img src={thumbnail} alt={name} style={imgStyle}/>\n            <div>\n                <div className=\"char__info-name\">{name}</div>\n                <div className=\"char__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n        <div className=\"char__descr\">\n           {description}\n        </div>\n        <div className=\"char__comics\">Comics:</div>\n        <ul className=\"char__comics-list\">\n            {comics.length > 0 ? null : 'There is no comics'}\n            {\n                comics.map((item, i) => {\n                    if (i > 9) { return };  \n                    return (\n                        <Link className=\"char__comics-item\" to={`/comics/${item.resourceURI.slice(-5)}`}>\n                        <li key={i}> {item.name} </li>\n                        </Link>\n                        \n                    )\n                })\n            }\n        </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from '../errorBoundary/ErrorBoundary'\r\nimport decoration from '../../resources/img/vision.png';\r\nimport CharSearchForm from \"../charSearchForm/charSearchForm\";\r\nimport { Helmet } from \"react-helmet\"\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setChar] = useState(null)\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                name=\"description\"\r\n                content=\"Marvel information portal\"\r\n                />\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n            <ErrorBoundary>\r\n                <CharList onCharSelected={onCharSelected}/>\r\n            </ErrorBoundary>\r\n            <div>\r\n                <ErrorBoundary>\r\n                    <CharInfo charId={selectedChar}/>\r\n                </ErrorBoundary>\r\n                <ErrorBoundary>\r\n                    <CharSearchForm/>\r\n                </ErrorBoundary>    \r\n            </div>\r\n        </div>\r\n        <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}} src={img} alt='Error' /> \r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import {useHttp} from '../hooks/http.hook'\r\n\r\nconst useMarvelService = () => {\r\n    const { request, clearError, process, setProcess} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/'\r\n    const _apiKey = 'apikey=156faa42555b87218bb091383c72c42d'\r\n    const _baseOffset = 210;\r\n    \r\n\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_tranformCharacter)\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _tranformCharacter(res.data.results[0])\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_tranformCharacter);\r\n    }\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_tranformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _tranformComics(res.data.results[0])\r\n    }\r\n\r\n    const _tranformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? char.description.slice(0, 200) + '...' : 'No data',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _tranformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || 'There is no description',\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            language: comics.textObjects.language || 'en-us',\r\n            price: comics.prices.price ? `${comics.prices.price}$` : 'not available'\r\n        }\r\n    }\r\n\r\n    return { getAllCharacters, getCharacter, clearError, getAllComics, getComic, getCharacterByName, process, setProcess}\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from 'react' \r\n\r\nexport const useHttp = () => {\r\n    const [ process, setProcess ] = useState('waiting');\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type':'application/json'}) => {\r\n\r\n        setProcess('loading');\r\n        try {\r\n            const responce = await fetch(url, {method, body, headers});\r\n            if(!responce.ok) {\r\n                throw new Error(`Could not fetch ${url}, status ${responce.status}.`);\r\n            }\r\n            const data = await responce.json()\r\n            return data;\r\n\r\n        } catch(e){\r\n            setProcess('error');\r\n            throw e;\r\n        }\r\n\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => {\r\n        setProcess('loading');\r\n    }, [])\r\n\r\n        return {request, clearError, process, setProcess}\r\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/errorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton';\r\n\r\n\r\nconst setContent = (process, Component, data) => {\r\n    switch (process) {\r\n        case 'waiting':\r\n            return <Skeleton/>;\r\n        case 'loading':\r\n            return <Spinner/>;\r\n        case 'confirmed':\r\n            return <Component data={data}/>;\r\n        case 'error':\r\n            return <ErrorMessage/>;\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nexport default setContent;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/errorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(err, errInfo) {\r\n        console.log(err, errInfo)\r\n        this.setState({\r\n            error:true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return (\r\n                <ErrorMessage/>\r\n            )\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n"],"sourceRoot":""}